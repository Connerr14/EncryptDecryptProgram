/*
Created by Conner Recoskie
May 31, 2022
This program excepts a string from the user, it then encryptes the message using
ceaser cipher and outputs it back on the GUI. The program can also decrypt the/a
message and output it back to the GUI.
*/

public class FrmEncryption extends javax.swing.JFrame {
    /*
    encrypt
    This method receives a regular string, it then encrypts the message using
    the ceaser cipher method and returns the encrypted message.
    Parameters: String
    Returns: String
    */
    public static String encrypt (String originalMessage) 
    {
        // Declaring local variables to be used in the encryption loop.
        String encryptedMessage = "";
        char tempChar;
        int tempAscill;
        
        for (int i = 0; i < originalMessage.length(); i++)
        {
            tempChar = originalMessage.charAt(i);
            
            tempAscill = (int)tempChar;
            
            tempAscill = tempAscill + 3;
            
            tempChar = (char)tempAscill;
            
            encryptedMessage = encryptedMessage + tempChar; 
        }
        
        return (encryptedMessage);
            
    }
    
    /*
    decrypt
    This method receives an encrypted message from the user and calculates and
    returns the original message.
    Parameters: String
    Returns: String
    */
    public static String decrypt (String encryptedMessage)
    {
        // Declaring local variables to be used in the decryption loop.
        String originalMessage = "";
        char tempChar;
        int tempAscill;
        
        for (int i = 0; i < encryptedMessage.length(); i++)
        {
            tempChar = encryptedMessage.charAt(i);

            tempAscill = (int)tempChar;

            tempAscill = tempAscill - 3;

            tempChar = (char)tempAscill;

            originalMessage = originalMessage + tempChar; 
        }

        return (originalMessage);
    }
    
    public FrmEncryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTopSecret1 = new javax.swing.JLabel();
        lblEncryptTitle = new javax.swing.JLabel();
        lblInstructions1 = new javax.swing.JLabel();
        txtToEncryption = new javax.swing.JTextField();
        lblEncrypted = new javax.swing.JLabel();
        lblInstructions2 = new javax.swing.JLabel();
        txtToDecryption = new javax.swing.JTextField();
        lblDecrypted = new javax.swing.JLabel();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        lblEncryptFooter = new javax.swing.JLabel();
        lblTopSecret2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTopSecret1.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        lblTopSecret1.setForeground(new java.awt.Color(255, 0, 0));
        lblTopSecret1.setText("---- Top Secret ---- ");

        lblEncryptTitle.setForeground(new java.awt.Color(255, 0, 0));
        lblEncryptTitle.setText("ENCRYPT / DECRYPT SOFTWARE");

        lblInstructions1.setForeground(new java.awt.Color(255, 0, 0));
        lblInstructions1.setText("Enter a decrypted message and it will be encrypted");

        lblEncrypted.setText("Encrypted message will be displayed here...");

        lblInstructions2.setForeground(new java.awt.Color(255, 0, 0));
        lblInstructions2.setText("Enter an encrypted message and it will be decrypted");

        lblDecrypted.setText("Decrypted message will be displayed here...");

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        lblEncryptFooter.setForeground(new java.awt.Color(255, 0, 0));
        lblEncryptFooter.setText("ENCRYPT / DECRYPT SOFTWARE");

        lblTopSecret2.setForeground(new java.awt.Color(255, 0, 0));
        lblTopSecret2.setText("---- Top Secret ---- ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblEncryptTitle)
                        .addGap(114, 114, 114))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTopSecret1)
                        .addGap(158, 158, 158))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblInstructions1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtToEncryption))
                            .addComponent(lblDecrypted, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtToDecryption, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblInstructions2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblEncrypted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnEncrypt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(btnDecrypt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(lblEncryptFooter))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(lblTopSecret2)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTopSecret1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEncryptTitle)
                .addGap(18, 18, 18)
                .addComponent(lblInstructions1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtToEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEncrypt)
                .addGap(18, 18, 18)
                .addComponent(lblEncrypted)
                .addGap(18, 18, 18)
                .addComponent(lblInstructions2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtToDecryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDecrypt)
                .addGap(18, 18, 18)
                .addComponent(lblDecrypted)
                .addGap(18, 18, 18)
                .addComponent(lblEncryptFooter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTopSecret2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        
        // Declaring a string variable to hold the users input
        String normalMessage;
        
        // Declaring a string variable to hold the encrypted message. 
        String encryptedMessage;
        
        // Getting the users input and assigning it to a variable
        normalMessage = txtToEncryption.getText();
        
        if (normalMessage.length() < 31)
        {
            /* Calling the encrypt method and passing it the users input
               and storing the result in a variable, if the input is less that 
               31 characters in length */
            encryptedMessage = encrypt(normalMessage);

            // Outputting the encrypted message to the GUI.
            lblEncrypted.setText(encryptedMessage);
        }
        else
        {   // Outputting error message, if the input is over 31 characters
            lblEncrypted.setText("Error! Sorry that input is too large");
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        
        // Declaring a string variable to hold the user input
        String encMessage;
        
        // Declaring a string variable to hold the decrypted message
        String decryptedMessage;
        
        // Getting the users input and assigning it to a variable
        encMessage = txtToDecryption.getText();
        
        if (encMessage.length() < 31)
        {
            /* Calling the decrypt method and passing it the users input
               and storing the result in a variable, if the input is less than 
               31 characters in length */
            decryptedMessage = decrypt(encMessage);

            // Outputting the decrypted message to the GUI.
            lblDecrypted.setText(decryptedMessage);
        }
        else
        {   // Outputting error message, if the input is over 31 characters
            lblDecrypted.setText("Error! Sorry that input is too large");
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmEncryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JLabel lblDecrypted;
    private javax.swing.JLabel lblEncryptFooter;
    private javax.swing.JLabel lblEncryptTitle;
    private javax.swing.JLabel lblEncrypted;
    private javax.swing.JLabel lblInstructions1;
    private javax.swing.JLabel lblInstructions2;
    private javax.swing.JLabel lblTopSecret1;
    private javax.swing.JLabel lblTopSecret2;
    private javax.swing.JTextField txtToDecryption;
    private javax.swing.JTextField txtToEncryption;
    // End of variables declaration//GEN-END:variables
}
